// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  broker
  partner
  company
}

enum TransactionStatus {
  pending
  completed
  failed
  cancelled
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи с другими моделями
  broker  Broker?
  partner Partner?
  company Company?
}

model Broker {
  id             String        @id @default(cuid())
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissionRate Float
  transactions   Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Partner {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissionRate Float
  companies      Company[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Company {
  id           String        @id @default(cuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  partnerId    String?
  partner      Partner?      @relation(fields: [partnerId], references: [id])
  balance      Float
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id              String            @id @default(cuid())
  amount          Float
  status          TransactionStatus
  transactionDate DateTime          @default(now())
  brokerId        String
  broker          Broker           @relation(fields: [brokerId], references: [id])
  companyId       String
  company         Company          @relation(fields: [companyId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}
